
33-traffic lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000608  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000608  0000069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800096  00800096  000006d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001635  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094a  00000000  00000000  00001eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b18  00000000  00000000  000027ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00003318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000551  00000000  00000000  00003540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000afc  00000000  00000000  00003a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000458d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 39       	cpi	r26, 0x97	; 151
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2e 02 	call	0x45c	; 0x45c <main>
  8a:	0c 94 02 03 	jmp	0x604	; 0x604 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
		break;
		case 'C':
		DDRC=direction;
		break;
		case 'D':
		DDRD=direction;
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_vsetPINDir+0x4a>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_vsetPINDir+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_vsetPINDir+0x18>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	b1 f1       	breq	.+108    	; 0x10e <DIO_vsetPINDir+0x7c>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	4c c0       	rjmp	.+152    	; 0x140 <DIO_vsetPINDir+0xae>
  a8:	08 95       	ret
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_vsetPINDir+0x32>
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vsetPINDir+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vsetPINDir+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_vsetPINDir+0x64>
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x5a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x56>
  f0:	82 2b       	or	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vsetPINDir+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vsetPINDir+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_vsetPINDir+0x96>
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x88>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x9e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_vsetPINDir+0xc8>
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_write>:
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	19 f1       	breq	.+70     	; 0x1bc <DIO_write+0x4a>
 176:	18 f4       	brcc	.+6      	; 0x17e <DIO_write+0xc>
 178:	81 34       	cpi	r24, 0x41	; 65
 17a:	39 f0       	breq	.+14     	; 0x18a <DIO_write+0x18>
 17c:	08 95       	ret
 17e:	83 34       	cpi	r24, 0x43	; 67
 180:	b1 f1       	breq	.+108    	; 0x1ee <DIO_write+0x7c>
 182:	84 34       	cpi	r24, 0x44	; 68
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_write+0x16>
 186:	4c c0       	rjmp	.+152    	; 0x220 <DIO_write+0xae>
 188:	08 95       	ret
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <DIO_write+0x32>
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_write+0x28>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_write+0x24>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_write+0x3e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_write+0x3a>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_write+0x64>
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x56>
 1d0:	82 2b       	or	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x70>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x6c>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x96>
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x88>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x9e>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_write+0xc8>
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0xbe>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0xba>
 234:	82 2b       	or	r24, r18
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
 23a:	22 b3       	in	r18, 0x12	; 18
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <DIO_write_port>:
		default: break;
	}
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 252:	82 34       	cpi	r24, 0x42	; 66
 254:	59 f0       	breq	.+22     	; 0x26c <DIO_write_port+0x1a>
 256:	18 f4       	brcc	.+6      	; 0x25e <DIO_write_port+0xc>
 258:	81 34       	cpi	r24, 0x41	; 65
 25a:	31 f0       	breq	.+12     	; 0x268 <DIO_write_port+0x16>
 25c:	08 95       	ret
 25e:	83 34       	cpi	r24, 0x43	; 67
 260:	39 f0       	breq	.+14     	; 0x270 <DIO_write_port+0x1e>
 262:	84 34       	cpi	r24, 0x44	; 68
 264:	39 f0       	breq	.+14     	; 0x274 <DIO_write_port+0x22>
 266:	08 95       	ret
	{
		case 'A':
		PORTA=portvalue;
 268:	6b bb       	out	0x1b, r22	; 27
		break;
 26a:	08 95       	ret
		case 'B':
		PORTB=portvalue;
 26c:	68 bb       	out	0x18, r22	; 24
		break;
 26e:	08 95       	ret
		case 'C':
		PORTC=portvalue;
 270:	65 bb       	out	0x15, r22	; 21
		break;
 272:	08 95       	ret
		case 'D':
		PORTD=portvalue;
 274:	62 bb       	out	0x12, r22	; 18
 276:	08 95       	ret

00000278 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	82 e4       	ldi	r24, 0x42	; 66
 27e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	8f e9       	ldi	r24, 0x9F	; 159
 284:	9f e0       	ldi	r25, 0x0F	; 15
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <send_falling_edge+0xe>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <send_falling_edge+0x14>
 28c:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	82 e4       	ldi	r24, 0x42	; 66
 294:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 298:	8f e9       	ldi	r24, 0x9F	; 159
 29a:	9f e0       	ldi	r25, 0x0F	; 15
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <send_falling_edge+0x24>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <send_falling_edge+0x2a>
 2a2:	00 00       	nop
 2a4:	08 95       	ret

000002a6 <LCD_vSend_cmd>:
	_delay_ms(2);
}
void LCD_vSend_cmd(char cmd)
{
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
 2a6:	68 2f       	mov	r22, r24
 2a8:	81 e4       	ldi	r24, 0x41	; 65
 2aa:	0e 94 29 01 	call	0x252	; 0x252 <DIO_write_port>
	DIO_write('B',RS,0);
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	82 e4       	ldi	r24, 0x42	; 66
 2b4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	send_falling_edge();
 2b8:	0e 94 3c 01 	call	0x278	; 0x278 <send_falling_edge>
 2bc:	8f ec       	ldi	r24, 0xCF	; 207
 2be:	97 e0       	ldi	r25, 0x07	; 7
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCD_vSend_cmd+0x1a>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCD_vSend_cmd+0x20>
 2c6:	00 00       	nop
 2c8:	08 95       	ret

000002ca <LCD_vInit>:
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	81 ee       	ldi	r24, 0xE1	; 225
 2ce:	94 e0       	ldi	r25, 0x04	; 4
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <LCD_vInit+0x6>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_vInit+0x10>
 2da:	00 00       	nop

void LCD_vInit(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	81 e4       	ldi	r24, 0x41	; 65
 2e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	81 e4       	ldi	r24, 0x41	; 65
 2ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	81 e4       	ldi	r24, 0x41	; 65
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e4       	ldi	r24, 0x41	; 65
 300:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	81 e4       	ldi	r24, 0x41	; 65
 30a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	81 e4       	ldi	r24, 0x41	; 65
 314:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	66 e0       	ldi	r22, 0x06	; 6
 31c:	81 e4       	ldi	r24, 0x41	; 65
 31e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	67 e0       	ldi	r22, 0x07	; 7
 326:	81 e4       	ldi	r24, 0x41	; 65
 328:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	82 e4       	ldi	r24, 0x42	; 66
 332:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	82 e4       	ldi	r24, 0x42	; 66
 33c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	82 e4       	ldi	r24, 0x42	; 66
 346:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_write('B',RW,0);
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	82 e4       	ldi	r24, 0x42	; 66
 350:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
 354:	88 e3       	ldi	r24, 0x38	; 56
 356:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_vSend_cmd>
 35a:	8f ec       	ldi	r24, 0xCF	; 207
 35c:	97 e0       	ldi	r25, 0x07	; 7
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <LCD_vInit+0x94>
 362:	00 c0       	rjmp	.+0      	; 0x364 <LCD_vInit+0x9a>
 364:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 366:	8c e0       	ldi	r24, 0x0C	; 12
 368:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_vSend_cmd>
 36c:	8f ec       	ldi	r24, 0xCF	; 207
 36e:	97 e0       	ldi	r25, 0x07	; 7
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_vInit+0xa6>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_vInit+0xac>
 376:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_vSend_cmd>
 37e:	8f e1       	ldi	r24, 0x1F	; 31
 380:	9e e4       	ldi	r25, 0x4E	; 78
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_vInit+0xb8>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_vInit+0xbe>
 388:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_vSend_cmd>
 390:	8f ec       	ldi	r24, 0xCF	; 207
 392:	97 e0       	ldi	r25, 0x07	; 7
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_vInit+0xca>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_vInit+0xd0>
 39a:	00 00       	nop
 39c:	08 95       	ret

0000039e <LCD_vSend_char>:
}

void LCD_vSend_char(char data)
{
	#if defined eight_bits_mode
	DIO_write_port('A',data);
 39e:	68 2f       	mov	r22, r24
 3a0:	81 e4       	ldi	r24, 0x41	; 65
 3a2:	0e 94 29 01 	call	0x252	; 0x252 <DIO_write_port>
	DIO_write('B',RS,1);
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	62 e0       	ldi	r22, 0x02	; 2
 3aa:	82 e4       	ldi	r24, 0x42	; 66
 3ac:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	send_falling_edge();
 3b0:	0e 94 3c 01 	call	0x278	; 0x278 <send_falling_edge>
 3b4:	8f ec       	ldi	r24, 0xCF	; 207
 3b6:	97 e0       	ldi	r25, 0x07	; 7
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <LCD_vSend_char+0x1a>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <LCD_vSend_char+0x20>
 3be:	00 00       	nop
 3c0:	08 95       	ret

000003c2 <LCD_vSend_string>:
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
 3ca:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_vSend_char>
		data++;
 3ce:	21 96       	adiw	r28, 0x01	; 1
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 3d0:	88 81       	ld	r24, Y
 3d2:	81 11       	cpse	r24, r1
 3d4:	fa cf       	rjmp	.-12     	; 0x3ca <LCD_vSend_string+0x8>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_vSend_cmd>
 3e2:	8f e1       	ldi	r24, 0x1F	; 31
 3e4:	9e e4       	ldi	r25, 0x4E	; 78
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCD_clearscreen+0xa>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCD_clearscreen+0x10>
 3ec:	00 00       	nop
 3ee:	08 95       	ret

000003f0 <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 3f0:	9f ef       	ldi	r25, 0xFF	; 255
 3f2:	98 0f       	add	r25, r24
 3f4:	92 30       	cpi	r25, 0x02	; 2
 3f6:	70 f4       	brcc	.+28     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3f8:	61 31       	cpi	r22, 0x11	; 17
 3fa:	70 f4       	brcc	.+28     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3fc:	66 23       	and	r22, r22
 3fe:	71 f0       	breq	.+28     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
	{
		data=0x80;
	}
	else if(row==1)
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	19 f4       	brne	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	{
		data=0x80+coloumn-1 ;
 404:	2f e7       	ldi	r18, 0x7F	; 127
 406:	26 0f       	add	r18, r22
 408:	0a c0       	rjmp	.+20     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	}
	else if (row==2)
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	41 f4       	brne	.+16     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	{
		data=0xc0+coloumn-1;
 40e:	2f eb       	ldi	r18, 0xBF	; 191
 410:	26 0f       	add	r18, r22
 412:	05 c0       	rjmp	.+10     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 414:	20 e8       	ldi	r18, 0x80	; 128
 416:	03 c0       	rjmp	.+6      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 418:	20 e8       	ldi	r18, 0x80	; 128
 41a:	01 c0       	rjmp	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41c:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 41e:	82 2f       	mov	r24, r18
 420:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_vSend_cmd>
 424:	8f ec       	ldi	r24, 0xCF	; 207
 426:	97 e0       	ldi	r25, 0x07	; 7
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
 430:	08 95       	ret

00000432 <LED_vInit>:
void LED_vInit(unsigned char portname,unsigned char pinnumber)
{
	 DIO_vsetPINDir(portname,pinnumber,1);
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 43e:	08 95       	ret

00000440 <LED_vTurnOn>:
}
void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)
{
	 DIO_write(portname,pinnumber,1);
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 44c:	08 95       	ret

0000044e <LED_vTurnOff>:
}
void LED_vTurnOff(unsigned char portname,unsigned char pinnumber)
{
	 DIO_write(portname,pinnumber,0);
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 45a:	08 95       	ret

0000045c <main>:
volatile unsigned char count_yellow=5;
volatile unsigned char count_red=7;

int main(void)
{
   LCD_vInit();
 45c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_vInit>
   LED_vInit('D',0);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	84 e4       	ldi	r24, 0x44	; 68
 464:	0e 94 19 02 	call	0x432	; 0x432 <LED_vInit>
   LED_vInit('D',1);
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	84 e4       	ldi	r24, 0x44	; 68
 46c:	0e 94 19 02 	call	0x432	; 0x432 <LED_vInit>
   LED_vInit('D',2);
 470:	62 e0       	ldi	r22, 0x02	; 2
 472:	84 e4       	ldi	r24, 0x44	; 68
 474:	0e 94 19 02 	call	0x432	; 0x432 <LED_vInit>
   timer_CTC_init_interrupt();
 478:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <timer_CTC_init_interrupt>
    while (1) 
    {
		count_green=10;
 47c:	8a e0       	ldi	r24, 0x0A	; 10
 47e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count_green>
		count_yellow=5;
 482:	85 e0       	ldi	r24, 0x05	; 5
 484:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count_yellow>
		count_red=7;
 488:	87 e0       	ldi	r24, 0x07	; 7
 48a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		LCD_clearscreen();
 48e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_clearscreen>
		LCD_vSend_string("remaining 10 sec");
 492:	83 e6       	ldi	r24, 0x63	; 99
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LCD_vSend_string>
		LED_vTurnOn('D',0);
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	84 e4       	ldi	r24, 0x44	; 68
 49e:	0e 94 20 02 	call	0x440	; 0x440 <LED_vTurnOn>
		while (count_green>0)
 4a2:	17 c0       	rjmp	.+46     	; 0x4d2 <main+0x76>
		{
			if (count1>=100)
 4a4:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 4a8:	84 36       	cpi	r24, 0x64	; 100
 4aa:	98 f0       	brcs	.+38     	; 0x4d2 <main+0x76>
			{
				count1=0;
 4ac:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end>
				count_green--;
 4b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count_green>
 4b4:	81 50       	subi	r24, 0x01	; 1
 4b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count_green>
				LCD_movecursor(1,11);
 4ba:	6b e0       	ldi	r22, 0x0B	; 11
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_movecursor>
				LCD_vSend_char(' ');
 4c2:	80 e2       	ldi	r24, 0x20	; 32
 4c4:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_vSend_char>
				LCD_vSend_char(count_green+48);
 4c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count_green>
 4cc:	80 5d       	subi	r24, 0xD0	; 208
 4ce:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_vSend_char>
		count_yellow=5;
		count_red=7;
		LCD_clearscreen();
		LCD_vSend_string("remaining 10 sec");
		LED_vTurnOn('D',0);
		while (count_green>0)
 4d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count_green>
 4d6:	81 11       	cpse	r24, r1
 4d8:	e5 cf       	rjmp	.-54     	; 0x4a4 <main+0x48>
 4da:	2f e9       	ldi	r18, 0x9F	; 159
 4dc:	86 e8       	ldi	r24, 0x86	; 134
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	21 50       	subi	r18, 0x01	; 1
 4e2:	80 40       	sbci	r24, 0x00	; 0
 4e4:	90 40       	sbci	r25, 0x00	; 0
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <main+0x84>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <main+0x8e>
 4ea:	00 00       	nop
				LCD_vSend_char(' ');
				LCD_vSend_char(count_green+48);
			}
		}
		_delay_ms(500);
		LED_vTurnOff('D',0);
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	84 e4       	ldi	r24, 0x44	; 68
 4f0:	0e 94 27 02 	call	0x44e	; 0x44e <LED_vTurnOff>
		LED_vTurnOn('D',1);
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	84 e4       	ldi	r24, 0x44	; 68
 4f8:	0e 94 20 02 	call	0x440	; 0x440 <LED_vTurnOn>
		LCD_clearscreen();
 4fc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_clearscreen>
		LCD_vSend_string("remaining  5 sec");
 500:	84 e7       	ldi	r24, 0x74	; 116
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LCD_vSend_string>
		while (count_yellow>0)
 508:	17 c0       	rjmp	.+46     	; 0x538 <main+0xdc>
		{
			if (count1>=100)
 50a:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 50e:	84 36       	cpi	r24, 0x64	; 100
 510:	98 f0       	brcs	.+38     	; 0x538 <main+0xdc>
			{
				count1=0;
 512:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end>
				count_yellow--;
 516:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count_yellow>
 51a:	81 50       	subi	r24, 0x01	; 1
 51c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count_yellow>
				LCD_movecursor(1,11);
 520:	6b e0       	ldi	r22, 0x0B	; 11
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_movecursor>
				LCD_vSend_char(' ');
 528:	80 e2       	ldi	r24, 0x20	; 32
 52a:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_vSend_char>
				LCD_vSend_char(count_yellow+48);
 52e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count_yellow>
 532:	80 5d       	subi	r24, 0xD0	; 208
 534:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_vSend_char>
		_delay_ms(500);
		LED_vTurnOff('D',0);
		LED_vTurnOn('D',1);
		LCD_clearscreen();
		LCD_vSend_string("remaining  5 sec");
		while (count_yellow>0)
 538:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count_yellow>
 53c:	81 11       	cpse	r24, r1
 53e:	e5 cf       	rjmp	.-54     	; 0x50a <main+0xae>
 540:	2f e9       	ldi	r18, 0x9F	; 159
 542:	86 e8       	ldi	r24, 0x86	; 134
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	21 50       	subi	r18, 0x01	; 1
 548:	80 40       	sbci	r24, 0x00	; 0
 54a:	90 40       	sbci	r25, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <main+0xea>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <main+0xf4>
 550:	00 00       	nop
				LCD_vSend_char(' ');
				LCD_vSend_char(count_yellow+48);
			}
		}
		_delay_ms(500);
		LED_vTurnOff('D',1);
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	84 e4       	ldi	r24, 0x44	; 68
 556:	0e 94 27 02 	call	0x44e	; 0x44e <LED_vTurnOff>
		LED_vTurnOn('D',2);
 55a:	62 e0       	ldi	r22, 0x02	; 2
 55c:	84 e4       	ldi	r24, 0x44	; 68
 55e:	0e 94 20 02 	call	0x440	; 0x440 <LED_vTurnOn>
		LCD_clearscreen();
 562:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_clearscreen>
		LCD_vSend_string("remaining  7 sec");
 566:	85 e8       	ldi	r24, 0x85	; 133
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LCD_vSend_string>
		while (count_red>0)
 56e:	17 c0       	rjmp	.+46     	; 0x59e <main+0x142>
		{
			if (count1>=100)
 570:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 574:	84 36       	cpi	r24, 0x64	; 100
 576:	98 f0       	brcs	.+38     	; 0x59e <main+0x142>
			{
				count1=0;
 578:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end>
				count_red--;
 57c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 580:	81 50       	subi	r24, 0x01	; 1
 582:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				LCD_movecursor(1,11);
 586:	6b e0       	ldi	r22, 0x0B	; 11
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_movecursor>
				LCD_vSend_char(' ');
 58e:	80 e2       	ldi	r24, 0x20	; 32
 590:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_vSend_char>
				LCD_vSend_char(count_red+48);
 594:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 598:	80 5d       	subi	r24, 0xD0	; 208
 59a:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_vSend_char>
		_delay_ms(500);
		LED_vTurnOff('D',1);
		LED_vTurnOn('D',2);
		LCD_clearscreen();
		LCD_vSend_string("remaining  7 sec");
		while (count_red>0)
 59e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5a2:	81 11       	cpse	r24, r1
 5a4:	e5 cf       	rjmp	.-54     	; 0x570 <main+0x114>
 5a6:	2f e9       	ldi	r18, 0x9F	; 159
 5a8:	86 e8       	ldi	r24, 0x86	; 134
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	21 50       	subi	r18, 0x01	; 1
 5ae:	80 40       	sbci	r24, 0x00	; 0
 5b0:	90 40       	sbci	r25, 0x00	; 0
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <main+0x150>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <main+0x15a>
 5b6:	00 00       	nop
				LCD_vSend_char(' ');
				LCD_vSend_char(count_red+48);
			}
		}
		_delay_ms(500);
		LED_vTurnOff('D',2);
 5b8:	62 e0       	ldi	r22, 0x02	; 2
 5ba:	84 e4       	ldi	r24, 0x44	; 68
 5bc:	0e 94 27 02 	call	0x44e	; 0x44e <LED_vTurnOff>
    }
 5c0:	5d cf       	rjmp	.-326    	; 0x47c <main+0x20>

000005c2 <__vector_10>:
}

ISR(TIMER0_COMP_vect)
{
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	8f 93       	push	r24
	count1++;
 5ce:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 5d2:	8f 5f       	subi	r24, 0xFF	; 255
 5d4:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end>
 5d8:	8f 91       	pop	r24
 5da:	0f 90       	pop	r0
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	0f 90       	pop	r0
 5e0:	1f 90       	pop	r1
 5e2:	18 95       	reti

000005e4 <timer_CTC_init_interrupt>:


void timer_CTC_init_interrupt(void)
{
	// wave generation mode
	SET_BIT(TCCR0,WGM01);
 5e4:	83 b7       	in	r24, 0x33	; 51
 5e6:	88 60       	ori	r24, 0x08	; 8
 5e8:	83 bf       	out	0x33, r24	; 51
	// load value in OCR0
	OCR0=78;
 5ea:	8e e4       	ldi	r24, 0x4E	; 78
 5ec:	8c bf       	out	0x3c, r24	; 60
	// clock select
	SET_BIT(TCCR0,CS00);
 5ee:	83 b7       	in	r24, 0x33	; 51
 5f0:	81 60       	ori	r24, 0x01	; 1
 5f2:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 5f4:	83 b7       	in	r24, 0x33	; 51
 5f6:	84 60       	ori	r24, 0x04	; 4
 5f8:	83 bf       	out	0x33, r24	; 51
	sei();
 5fa:	78 94       	sei
	// interrupt mask register
	SET_BIT(TIMSK,OCIE0);
 5fc:	89 b7       	in	r24, 0x39	; 57
 5fe:	82 60       	ori	r24, 0x02	; 2
 600:	89 bf       	out	0x39, r24	; 57
 602:	08 95       	ret

00000604 <_exit>:
 604:	f8 94       	cli

00000606 <__stop_program>:
 606:	ff cf       	rjmp	.-2      	; 0x606 <__stop_program>
